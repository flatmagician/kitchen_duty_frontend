{"version":3,"sources":["logo.svg","CalendarWrapper.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","localizer","momentLocalizer","moment","CalendarWrapper","props","className","getNow","events","eventsList","startAccessor","endAccessor","style","height","selectable","longPressThreshold","onSelectSlot","onSelecting","axios","require","backend_url","get_date","query","a","post","moment_to_query","date","format","split","year","Number","month","day","App","state","inputValue","initEvents","bind","updateEvents","onDayClick","incrementMonth","decrementMonth","inputKeyDownHandler","inputKeyPressHandler","this","Promise","all","arrDays","result","push","get_days_in_month","then","dates","map","data","start","end","title","name","setState","event","key","length","substring","insert_date","remove_date","document","querySelectorAll","forEach","button","innerHTML","click","Date","value","width","onKeyDown","onKeyPress","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1ecbc3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar'\n// import { EventCalendar } from 'react-event-calendar'\nimport moment from 'moment'\n\nconst localizer = momentLocalizer(moment)\n\nexport const CalendarWrapper = props => (\n    <div className=\"calendarWrapper\">\n        <Calendar\n            localizer={localizer}\n            getNow={props.getNow}\n            events={props.eventsList}\n            startAccessor=\"start\"\n            endAccessor=\"end\"\n            style={{ height: 500 }}\n            selectable={true}\n            longPressThreshold={0}\n            onSelectSlot={props.onSelecting}\n        />\n    </div>\n)","const axios = require('axios')\nconst moment = require('moment')\n\n// const backend_url = \"http://127.0.0.1:5000\"\nconst backend_url = \"https://kitchen-duty-backend.herokuapp.com\"\n\n\nexport async function get_date(query) {\n    return axios.post(`${backend_url}/get_date`, query)\n}\n\nexport async function insert_date(query) {\n    return axios.post(`${backend_url}/insert_date`, query)\n}\n\nexport async function remove_date(query) {\n    return axios.post(`${backend_url}/remove_date`, query)\n}\n\nexport function moment_to_query(moment) {\n    const date = moment.format('YYYY MM DD').split(\" \")\n    return {\n        year: Number(date[0]),\n        month: Number(date[1]),\n        day: Number(date[2])\n    }\n}\n\nexport function get_days_in_month(year, month) {\n    let arrDays = [];\n    let day = 1\n    while (day <= 31) {\n        let current = moment(`${year}-${month}`).date(day);\n        const query = moment_to_query(current)\n        let result = get_date(query)\n        arrDays.push(result);\n        day++;\n    }\n\n    return arrDays;\n}\n\n\nexport function current_date() {\n    return moment()\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport { Calendar, momentLocalizer } from 'react-big-calendar'\nimport moment from 'moment'\nimport ObjectId from 'bson-objectid'\nimport { CalendarWrapper } from './CalendarWrapper';\nimport { get_days_in_month, remove_date } from './utils'\nimport { insert_date } from './utils'\n\nimport 'react-big-calendar/lib/css/react-big-calendar.css'\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n    this.year = moment().year()\n    this.month = 1\n    this.day = moment().date()\n    this.state = {\n      year: this.year,\n      month: this.month,\n      day: this.day,\n      eventsList: [],\n      inputValue: \"\"\n    }\n    this.initEvents = this.initEvents.bind(this)\n    this.updateEvents = this.updateEvents.bind(this)\n    this.onDayClick = this.onSelecting.bind(this)\n    this.incrementMonth = this.incrementMonth.bind(this)\n    this.decrementMonth = this.decrementMonth.bind(this)\n    this.getNow = this.getNow.bind(this)\n    this.inputKeyDownHandler = this.inputKeyDownHandler.bind(this)\n    this.inputKeyPressHandler = this.inputKeyPressHandler.bind(this)\n  }\n\n  componentWillMount() {\n    this.initEvents()\n  }\n\n  initEvents() {\n    Promise.all(get_days_in_month(this.state.year, this.state.month + 1)).then(dates => {\n      const eventsList = dates.map(date => {\n        if (date.data === \"None\") {\n          return null\n        }\n        return {\n          start: `${date.data.year}-${date.data.month}-${date.data.day}`,\n          end: `${date.data.year}-${date.data.month}-${date.data.day}`,\n          title: date.data.name,\n        }\n      })\n      this.onSelecting = this.onSelecting.bind(this)\n      this.setState({\n        eventsList: eventsList\n      })\n    })\n  }\n\n  updateEvents() {\n    let eventsList = this.state.eventsList\n    if (this.state.inputValue === \"\") {\n      eventsList = eventsList.map(event => {\n        if (event !== null && event.start === `${this.state.year}-${this.state.month + 1}-${this.state.day}`) {\n          return null\n        }\n        return event\n      })\n\n    }\n    else {\n      eventsList[this.state.day + 1] = {\n        start: `${this.state.year}-${this.state.month + 1}-${this.state.day}`,\n        end: `${this.state.year}-${this.state.month + 1}-${this.state.day}`,\n        title: this.state.inputValue,\n      }\n    }\n    this.setState({ eventsList: \"\" })\n  }\n\n  onSelecting(data) {\n    let date = moment(data.start)\n    let day = date.date()\n    let year = date.year()\n    let month = date.month()\n    this.setState({\n      day,\n      year,\n      month\n    })\n  }\n\n  inputKeyDownHandler(event) {\n    if (event.key === \"Backspace\") {\n      if (this.state.inputValue.length > 0) {\n        this.setState({\n          inputValue: this.state.inputValue.substring(0, this.state.inputValue.length - 1)\n        })\n      }\n    }\n  }\n\n  inputKeyPressHandler(event) {\n    if (event.key !== \"Enter\") {\n      this.setState({\n        inputValue: this.state.inputValue + event.key\n      })\n    }\n    else {\n      if (this.state.inputValue !== \"\") {\n        insert_date({\n          day: this.state.day,\n          month: this.state.month + 1,\n          year: this.state.year,\n          name: this.state.inputValue\n        }).then(this.updateEvents)\n      }\n      else {\n        remove_date({\n          day: this.state.day,\n          month: this.state.month + 1,\n          year: this.state.year\n        }).then(this.updateEvents)\n      }\n    }\n  }\n\n\n  incrementMonth() {\n    if (this.state.month !== 11) {\n      this.setState({\n        month: this.state.month + 1,\n      }, this.initEvents)\n    }\n    else {\n      this.setState({\n        month: 0,\n        year: this.state.year + 1,\n      }, this.initEvents)\n    }\n    document.querySelectorAll('button').forEach(button => {\n      if (button.innerHTML === \"Next\") {\n        button.click()\n      }\n    })\n  }\n\n  decrementMonth() {\n    if (this.state.month === 0 && this.state.year === 2020) {\n    }\n    else {\n      if (this.state.month !== 0) {\n        this.setState({\n          month: this.state.month - 1,\n        }, this.initEvents)\n      }\n      else {\n        this.setState({\n          month: 11,\n          year: this.state.year - 1,\n        }, this.initEvents)\n      }\n      document.querySelectorAll('button').forEach(button => {\n        if (button.innerHTML === \"Back\") {\n          button.click()\n        }\n      })\n    }\n  }\n\n  getNow() {\n    return new Date(this.state.year, this.state.month, this.state.day)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"inputWrapper\">\n          <div className=\"instructionalText\">\n            <div>Click on a Cell to select a date</div>\n            <div>Type in the text area to Enter a Name</div>\n            <div>Press Enter in the text area to Submit Name</div>\n            <div>Press Enter with no text Entered to delete Name\"</div>\n          </div>\n          <textarea value={this.state.inputValue} style={{ width: \"25%\", height: \"50px\" }} onKeyDown={this.inputKeyDownHandler} onKeyPress={this.inputKeyPressHandler}></textarea>\n          <div className=\"MonthSwitcher\">\n            <div className=\"increment button\" onClick={this.incrementMonth}>+</div>\n            <div>{moment(`${this.state.month === 12 ? 1 : this.state.month + 1}-${this.state.year}`, \"MM-YYYY\").format(\"MMMM\")} {this.state.year}</div>\n            <div className=\"decrement button\" onClick={this.decrementMonth}>-</div>\n          </div>\n        </div>\n        <CalendarWrapper eventsList={this.state.eventsList} month={this.state.month - 1} year={this.state.year} getNow={this.getNow} onSelecting={this.onSelecting} />\n      </div >\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}